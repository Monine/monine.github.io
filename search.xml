<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[聊聊 input file - 文件上传]]></title>
      <url>https://monine.github.io/2016/08/27/input-type-file/</url>
      <content type="html"><![CDATA[<blockquote>
<p>近期移动端项目用到了图片上传的功能，之前一直没有接触过，不知道原来在不需要后端的情况下前端就能够做那么多事情，再次感叹 HTML5 的强大。在近期移动端这个项目中用到的东西不多，不过应该是满足了平时的基本需求，包括按钮样式、文件多选、事件监听、文件类型、大小限制、图片预览和上传。</p>
</blockquote>
<a id="more"></a>
<p>首先推荐<strong>张鑫旭</strong>大神的以下这两篇文章</p>
<ul>
<li><a href="http://www.zhangxinxu.com/wordpress/?p=5071" target="_blank" rel="external">HTML input type=file文件选择表单元素二三事</a></li>
<li><a href="http://www.zhangxinxu.com/wordpress/?p=1923" target="_blank" rel="external">基于HTML5的可预览多图片Ajax上传</a></li>
</ul>
<p>不得不感叹一句 “前人栽树，后人乘凉”，真心要感谢这些前辈对行业发展作出的贡献，没有他们的付出，就没有咱这些后人的便捷。</p>
<hr>
<h2 id="———-按钮样式-———"><a href="#———-按钮样式-———" class="headerlink" title="——— 按钮样式 ———"></a>——— 按钮样式 ———</h2><p><code>&lt;input type=&quot;file&quot;&gt;</code> 的默认样式简直丑到爆！而且还很不好控制，在项目中简直不可能使用。</p>
<p><img src="../../../../images/2016-08-27-1.png" alt="input-type=file"></p>
<p><code>input</code> 这种货色并不是不能替代，给它一个 <code>id</code>，你就能用 <code>label</code> 标签替代它干活，样式问题自然就交给 <code>label</code> 标签也是很 OK 的。</p>
<h2 id="———-支持多选-———"><a href="#———-支持多选-———" class="headerlink" title="——— 支持多选 ———"></a>——— 支持多选 ———</h2><p>只要在 <code>&lt;input type=&quot;file&quot;&gt;</code> 上添加一个叫做 <code>multiple</code> 的属性名就能够支持文件多选，HTML5 简直了…</p>
<h2 id="———-文件类型-———"><a href="#———-文件类型-———" class="headerlink" title="——— 文件类型 ———"></a>——— 文件类型 ———</h2><p>前端做久了，深刻的感受到用户的行为是不可控的。<br>拿上传图片来说，我们希望用户上传的是图片资源，可尼玛有些用户就是不听指挥，上传一些种子资源，这尼玛情何以堪。</p>
<p><em>用户的操作我们不能控制，但是我们可以做到限制。</em></p>
<p>So… <code>accept</code> 这个属性就要隆重登场啦，它指定浏览器接受的文件类型。<br>例如我们限制用户只能上传图片：<code>accept=&quot;image/*&quot;</code><br>打开系统选择文件弹框的时候右下角文件类型选项显示的就是 “图片文件” 啦。<br>多种文件格式 <code>accept</code> 值使用逗号隔开： <code>accept=&quot;image/*, video/*, audio/*&quot;</code></p>
<p>OK，到此我们 html 里面的代码就应该是下面这样的。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"uploadFileBtn"</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"uploadFileBtn"</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">accept</span>=<span class="string">"image/*"</span> <span class="attr">multiple</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="———-事件监听-———"><a href="#———-事件监听-———" class="headerlink" title="——— 事件监听 ———"></a>——— 事件监听 ———</h2><p>在 <code>input</code> 元素上监听 <code>change</code> 事件就能获取到用户上传的文件信息，包括文件名、上传时间、文件大小等等，通过 <code>FileReader</code> 我们还可以将图片文件转换成 base64 编码格式实现预览图片功能。</p>
<p>在 <code>change</code> 事件监听的函数内，<code>event.target.files</code> 就是用户上传的图片信息。</p>
<h2 id="———-文件大小-———"><a href="#———-文件大小-———" class="headerlink" title="——— 文件大小 ———"></a>——— 文件大小 ———</h2><p>实际情况下，我们不可能让用户随意上传太大的文件，所以这里我们也需要对文件大小做一些限制。</p>
<p>在获取到的文件信息中有个 <code>size</code> 的属性就是文件的大小，单位是 B。也就是说，如果我们限制用户上传的单个文件最大为 3M，那么 <code>size</code> 属性的值就应该不大于 <code>3 * 1024 * 1024 = 3145728</code>。</p>
<h2 id="———-图片预览-———"><a href="#———-图片预览-———" class="headerlink" title="——— 图片预览 ———"></a>——— 图片预览 ———</h2><p>上面已经说到了，图片预览就是将用户上传的图片格式转换成 base64 格式，然后将它设置为 <code>img</code> 标签的 <code>src</code> 属性值添加到 DOM 中去。</p>
<p>那么怎么实现了？</p>
<p><code>FileReader</code> 提供 <code>readAsDataURL</code> 方法可以实现我们的需求，当 <code>FileReader</code> 的实例把图片转换为 base64 格式之后，会触发 <code>onload</code> 方法，此方法内的 <code>event.target.result</code> 就是我们所需要的 base64 格式图片。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">previewImgFile</span>(<span class="params">event, files, index</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> _files = files || event.target.files;</div><div class="line">  <span class="keyword">var</span> _index = index || <span class="number">0</span>;</div><div class="line">  <span class="keyword">var</span> reader = <span class="keyword">new</span> FileReader();</div><div class="line"></div><div class="line">  reader.onload = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> eImg = <span class="built_in">document</span>.createElement(<span class="string">'img'</span>);</div><div class="line">    eImg.src = event.target.result;</div><div class="line">    <span class="built_in">document</span>.body.appendChild(eImg);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> ((_index += <span class="number">1</span>) &lt; _files.length) previewFiles(event, _files, _index);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  reader.readAsDataURL(_files[_index]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">document</span>.querySelector(<span class="string">'#uploadFileBtn'</span>).addEventListener(<span class="string">'change'</span>, previewImgFile, <span class="literal">false</span>);</div></pre></td></tr></table></figure>
<h2 id="———-图片上传-———"><a href="#———-图片上传-———" class="headerlink" title="——— 图片上传 ———"></a>——— 图片上传 ———</h2><p>这里有个非常重要的点需要明白，图片上传不同于普通表单数据提交，它们需要的编码格式是不一样的。<br>普通表单数据的编码类型为 <code>application/x-www-form-urlencoded</code>，而对于文件上传，编码类型应该使用 <code>multipart/form-data</code>。</p>
<p>也就是说，如果使用 <code>form</code> 表单上传文件（比如图片），那么 <code>form</code> 元素需要添加属性 <code>enctype=&quot;multipart/form-data&quot;</code>。<br><code>&lt;form enctype=&quot;multipart/form-data&gt;&lt;/form&gt;</code></p>
<p>还有一种方式是在 js 中使用 <code>FormData</code> 和 <code>XMLHttpRequest</code> 实现上传<br><code>FormData</code> 用来保存文件数据<br><code>XMLHttpRequest</code> 提供发送数据请求</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">uploadUserFile</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> files = event.target.files;</div><div class="line">  <span class="keyword">var</span> formData = <span class="keyword">new</span> FormData();</div><div class="line">  <span class="keyword">var</span> request = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line"></div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = files.length; i &lt; len; i++) &#123;</div><div class="line">    formData.append(<span class="string">'userUploadFile'</span>, files[i]);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  request.open(<span class="string">'POST'</span>, <span class="string">'a/p/i'</span>);</div><div class="line">  request.send(formData);</div><div class="line"></div><div class="line">  request.onload = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> oResponse = <span class="built_in">JSON</span>.parse(event.target.response);</div><div class="line">    <span class="comment">// do something</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">document</span>.querySelector(<span class="string">'#uploadFileBtn'</span>).addEventListener(<span class="string">'change'</span>, uploadUserFile, <span class="literal">false</span>);</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[告别定时器，走向 window.requestAnimationFrame()]]></title>
      <url>https://monine.github.io/2016/08/21/requestAnimationFrame/</url>
      <content type="html"><![CDATA[<blockquote>
<p>以前有做过一些 HTML5 <code>canvas</code> 动画，但一直也没有仔细去了解过，而且也都是使用定时器 <code>setTimeout</code> 和 <code>setInterval</code> 方法去刷新 <code>canvas</code>。然而定时器延迟是无法保证准确的，因为所有的 JavaScript 在单线程中执行，只有当前面队列（代码）执行完毕且轮到了自己才能被执行，而且页面定时器可能不只有一个是吧，定时器越多延迟也就越严重。也就是说，无法保证帧速率达到显示器的刷新速率 <strong>60帧/秒 (60FPS)</strong>。</p>
</blockquote>
<a id="more"></a>
<h2 id="———-前言-———"><a href="#———-前言-———" class="headerlink" title="——— 前言 ———"></a>——— 前言 ———</h2><p>浏览器厂商可能也因为市场需求（上诉原因导致）原生支持了 <code>requestAnimationFrame</code> 方法，此方法基本上能保证帧速率达到 60FPS。但是此方法在还没形成标准之前，很多低版本浏览器是不支持的，比如：IE9 以及以下版本，不过谷歌和火狐都用私有的方法名实现了 <code>requestAnimationFrame</code> 方法。比如：谷歌 - <code>webkitRequestAnimationFrame</code>、火狐 - <code>mozRequestAnimationFrame</code>。形成标准后，IE10 才开始支持，由于 IE10 支持的是标准的 <code>requestAnimationFrame</code> 方法，因此它没有私有前缀。</p>
<h3 id="—-参考-—"><a href="#—-参考-—" class="headerlink" title="— 参考 —"></a><em>— 参考 —</em></h3><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame/" target="_blank" rel="external">MDN - window.requestAnimationFrame()</a><br><a href="http://www.paulirish.com/2011/requestanimationframe-for-smart-animating/" target="_blank" rel="external">requestAnimationFrame for Smart Animating</a></p>
<h2 id="———-那么-———"><a href="#———-那么-———" class="headerlink" title="——— 那么 ———"></a>——— 那么 ———</h2><p><code>requestAnimationFrame</code> 到底是什么?</p>
<p>我还真不知道该怎么直接回答，所以我想从另外一个角度来说说看，它做到了什么？<br>众所周知，目前无论 PC 还是 Mobile 的显示器刷新速率都是 60FPS，也就是刷新间隔在 16.7ms (1000 / 60) 左右。定时器 <code>setTimeout</code> 和 <code>setInterval</code> 因为 Javascript 单线程的原因无法保证刷新速率稳定，而 <code>requestAnimationFrame</code> 做到了这一点，<strong>它跟随浏览器绘制而执行</strong>。</p>
<p>如何使用了？</p>
<p>首先解决兼容性问题，先贴一段<a href="https://github.com/darius/requestAnimationFrame" target="_blank" rel="external">大神</a>的代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (!<span class="built_in">Date</span>.now)</div><div class="line">    <span class="built_in">Date</span>.now = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>().getTime(); &#125;;</div><div class="line"></div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line"><span class="meta">    'use strict'</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> vendors = [<span class="string">'webkit'</span>, <span class="string">'moz'</span>];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; vendors.length &amp;&amp; !<span class="built_in">window</span>.requestAnimationFrame; ++i) &#123;</div><div class="line">        <span class="keyword">var</span> vp = vendors[i];</div><div class="line">        <span class="built_in">window</span>.requestAnimationFrame = <span class="built_in">window</span>[vp+<span class="string">'RequestAnimationFrame'</span>];</div><div class="line">        <span class="built_in">window</span>.cancelAnimationFrame = (<span class="built_in">window</span>[vp+<span class="string">'CancelAnimationFrame'</span>]</div><div class="line">                                   || <span class="built_in">window</span>[vp+<span class="string">'CancelRequestAnimationFrame'</span>]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (<span class="regexp">/iP(ad|hone|od).*OS 6/</span>.test(<span class="built_in">window</span>.navigator.userAgent) <span class="comment">// iOS6 is buggy</span></div><div class="line">        || !<span class="built_in">window</span>.requestAnimationFrame || !<span class="built_in">window</span>.cancelAnimationFrame) &#123;</div><div class="line">        <span class="keyword">var</span> lastTime = <span class="number">0</span>;</div><div class="line">        <span class="built_in">window</span>.requestAnimationFrame = <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> now = <span class="built_in">Date</span>.now();</div><div class="line">            <span class="keyword">var</span> nextTime = <span class="built_in">Math</span>.max(lastTime + <span class="number">16</span>, now);</div><div class="line">            <span class="keyword">return</span> setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; callback(lastTime = nextTime); &#125;,</div><div class="line">                              nextTime - now);</div><div class="line">        &#125;;</div><div class="line">        <span class="built_in">window</span>.cancelAnimationFrame = clearTimeout;</div><div class="line">    &#125;</div><div class="line">&#125;());</div></pre></td></tr></table></figure>
<p>好啦，现在就不用管兼容性问题啦。有兴趣的同学可以好好去理解上面这段代码。</p>
<p>然后我们把执行动画的方法传入 <code>requestAnimationFrame</code> 用做参数就行啦。</p>
<p><a href="http://monine.github.io/study/demo/requestAnimationFrame.html">查看 Demo</a></p>
<h3 id="—-Tips-—"><a href="#—-Tips-—" class="headerlink" title="— Tips —"></a><em>— Tips —</em></h3><p>在执行动画的方法最后必须继续调用 <code>requestAnimationFrame</code> 方法，参数就传当前方法名。</p>
<h3 id="—-然而-—"><a href="#—-然而-—" class="headerlink" title="— 然而 —"></a><em>— 然而 —</em></h3><p><code>requestAnimationFrame</code> 也并不是没有缺陷，我认为它最大而且唯一的缺陷就是根本无法控制它的 <strong>刷新速率（FPS）</strong>！！！</p>
<p>目前为止是无解，如果需要控制 <strong>刷新速率（FPS）</strong> 还是只能转身回区使用定时器吧。T-T</p>
<h2 id="———-大神-———"><a href="#———-大神-———" class="headerlink" title="——— 大神 ———"></a>——— 大神 ———</h2><p>其实在早年间在我还没有接触前端行业之时，就有一位国内的大神已经对 <code>requestAnimationFrame</code> 进行了详细的描述，其用途作用也是理解的十分透彻，比我这种小菜猴牛B的不知道哪里去了，甩了不只一两条街。</p>
<p>没错，他就是<strong>张鑫旭</strong>大神，请看他对 <code>requestAnimationFrame</code> 的报导：</p>
<p><a href="http://www.zhangxinxu.com/wordpress/?p=3695" target="_blank" rel="external">CSS3动画那么强，requestAnimationFrame还有毛线用？</a> <a href="http://note.youdao.com/noteshare?id=6857f4cb1a9d7852c8e0f3618cb66cae" target="_blank" rel="external">（备份 - 链接失效再来点我）</a></p>
<h2 id="———-最后-———"><a href="#———-最后-———" class="headerlink" title="——— 最后 ———"></a>——— 最后 ———</h2><p>上周三8月17号是我入职智云70度正好一年的时间，后知后觉才记起，打算整理下从我入职以来所做的事情，应该说给咱70度制作平台添加的功能。写这篇文章的源头是我以前做的一个叫环境的特效功能，引入的这段特效的 js 代码头部有一段 <code>requestAnimationFrame</code> 的代码，当时太菜所以没关注，现在回过头来整理理解，也算是发现了一块新大陆。</p>
<p>本想着写一段抒情的话语说说过去的这一年，算了，实在不够矫情。前端的路还很长，继续加油！！！</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Gulp 实践]]></title>
      <url>https://monine.github.io/2016/08/13/Gulp-Practice/</url>
      <content type="html"><![CDATA[<h2 id="———-安装-Node-JS-———"><a href="#———-安装-Node-JS-———" class="headerlink" title="——— 安装 Node.JS ———"></a>——— 安装 <a href="http://nodejs.cn/" target="_blank" rel="external">Node.JS</a> ———</h2><p>Node.JS 自带 npm 包管理器，使用 npm 来安装 Gulp 非常方便。</p>
<h2 id="———-全局安装-Gulp-———"><a href="#———-全局安装-Gulp-———" class="headerlink" title="——— 全局安装 Gulp ———"></a>——— 全局安装 <a href="http://www.gulpjs.com.cn/" target="_blank" rel="external">Gulp</a> ———</h2><p><code>$ npm install gulp -g</code><br><code>$ npm install gulp-cli -g</code></p>
<a id="more"></a>
<h3 id="—-Tips-—"><a href="#—-Tips-—" class="headerlink" title="— Tips —"></a><em>— Tips —</em></h3><p>如果 gulp 有版本冲突，请先卸载之前的版本。</p>
<h2 id="———-在项目中使用-gulp-———"><a href="#———-在项目中使用-gulp-———" class="headerlink" title="——— 在项目中使用 gulp ———"></a>——— 在项目中使用 gulp ———</h2><h3 id="—-Tips-—-1"><a href="#—-Tips-—-1" class="headerlink" title="— Tips —"></a><em>— Tips —</em></h3><blockquote>
<p>请在项目根目录完成以下操作</p>
</blockquote>
<p>初始化项目目录</p>
<p><code>$ npm init</code></p>
<p>在项目根目录创建一个 gulpfile.js 文件然后输入以下代码</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'default'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">// 在这里写默认任务的代码</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>执行 <code>$ gulp</code></p>
<p>执行完成后暂时是看不到任何变化的，因为 gulpfile.js 目前并没有做任何事情。</p>
<h2 id="———-安装常用依赖插件-———"><a href="#———-安装常用依赖插件-———" class="headerlink" title="——— 安装常用依赖插件 ———"></a>——— 安装常用依赖插件 ———</h2><ul>
<li><a href="https://github.com/sindresorhus/gulp-autoprefixer" target="_blank" rel="external">gulp-autoprefixer</a></li>
</ul>
<blockquote>
<p>Auto add vendor prefixes to rules</p>
</blockquote>
<p>自动添加浏览器私有前缀工具</p>
<ul>
<li><a href="https://github.com/joaoeaugusto/gulp-minify-css" target="_blank" rel="external">gulp-minify-css</a></li>
</ul>
<blockquote>
<p>Gulp task to concatenate and minify raw css</p>
</blockquote>
<p>CSS 压缩工具</p>
<ul>
<li><a href="https://github.com/terinjokes/gulp-uglify" target="_blank" rel="external">gulp-uglify</a></li>
</ul>
<blockquote>
<p>Minify JavaScript with UglifyJS2.</p>
</blockquote>
<p>Javascript 压缩工具 - 代码混淆</p>
<ul>
<li><a href="">gulp-jshint</a></li>
</ul>
<blockquote>
<p>JSHint plugin for gulp</p>
</blockquote>
<p>JavaScript 代码质量工具，用来检测 Javascript 代码的问题。</p>
<ul>
<li><a href="https://github.com/peter-vilja/gulp-clean" target="_blank" rel="external">gulp-clean</a></li>
</ul>
<blockquote>
<p>A gulp plugin for removing files and folders from given paths.</p>
</blockquote>
<p>清理工具，用来删除指定的文件或是文件夹。</p>
<ul>
<li><a href="https://github.com/hparra/gulp-rename" target="_blank" rel="external">gulp-rename</a></li>
</ul>
<blockquote>
<p>Rename files easily</p>
</blockquote>
<p>文件重命名工具</p>
<ul>
<li><a href="https://github.com/contra/gulp-concat" target="_blank" rel="external">gulp-concat</a></li>
</ul>
<blockquote>
<p>Streaming concat middleware for gulp</p>
</blockquote>
<p>文件合并工具</p>
<h3 id="—-一键安装-—"><a href="#—-一键安装-—" class="headerlink" title="— 一键安装 —"></a><em>— 一键安装 —</em></h3><blockquote>
<p><code>$ npm install gulp-autoprefixer gulp-minify-css gulp-uglify gulp-jshint gulp-clean gulp-rename gulp-concat --save-dev</code></p>
</blockquote>
<h2 id="———-干货代码-———"><a href="#———-干货代码-———" class="headerlink" title="——— 干货代码 ———"></a>——— 干货代码 ———</h2><h3 id="—-提供最简单的-gulpfile-js-—"><a href="#—-提供最简单的-gulpfile-js-—" class="headerlink" title="— 提供最简单的 gulpfile.js —"></a><em>— 提供最简单的 gulpfile.js —</em></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">// 引入依赖插件</span></div><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);  </div><div class="line"><span class="keyword">var</span> autoprefixer = <span class="built_in">require</span>(<span class="string">'gulp-autoprefixer'</span>);</div><div class="line"><span class="keyword">var</span> minifycss = <span class="built_in">require</span>(<span class="string">'gulp-minify-css'</span>);</div><div class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>);</div><div class="line"><span class="keyword">var</span> jshint = <span class="built_in">require</span>(<span class="string">'gulp-jshint'</span>);</div><div class="line"><span class="keyword">var</span> clean = <span class="built_in">require</span>(<span class="string">'gulp-clean'</span>);</div><div class="line"><span class="keyword">var</span> rename = <span class="built_in">require</span>(<span class="string">'gulp-rename'</span>);</div><div class="line"><span class="keyword">var</span> concat = <span class="built_in">require</span>(<span class="string">'gulp-concat'</span>);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'styles'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> gulp.src([<span class="string">'./**/*.css'</span>]) <span class="comment">// 读取 css 文件</span></div><div class="line">             .autoprefixer(<span class="string">'last 2 version'</span>, <span class="string">'ios 7'</span>, <span class="string">'android 4'</span>) <span class="comment">// 添加浏览器私有前缀</span></div><div class="line">             .pipe(concat(<span class="string">'main.css'</span>)) <span class="comment">// 合并读取到的 css 文件到 main.css</span></div><div class="line">             .pipe(gulp.dest(<span class="string">'./dist/'</span>)) <span class="comment">// 把 main.css 发布到 dist 文件夹内</span></div><div class="line">             .pipe(rename(&#123;suffix: <span class="string">'.min'</span>&#125;)) <span class="comment">// 重命名添加 .min 后缀 - main.min.css</span></div><div class="line">             .pipe(minifycss()) <span class="comment">// css 代码压缩</span></div><div class="line">             .pipe(gulp.dest(<span class="string">'./dist/'</span>)) <span class="comment">// 把 main.min.css 发布到 dist 文件夹内</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'scripts'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> gulp.src([<span class="string">'./**/*.js'</span>]) <span class="comment">// 读取 js 文件</span></div><div class="line">             .pipe(jshint(<span class="string">'.jshintrc'</span>)) <span class="comment">// js 代码检测</span></div><div class="line">             .pipe(jshint.reporter(<span class="string">'default'</span>)) <span class="comment">// js 检测问题报告</span></div><div class="line">             .pipe(concat(<span class="string">'main.js'</span>)) <span class="comment">// 合并读取到的 js 文件到 main.js</span></div><div class="line">             .pipe(gulp.dest(<span class="string">'./dist/'</span>)) <span class="comment">// 把 main.js 发布到 dist 文件夹内</span></div><div class="line">             .pipe(rename(&#123;suffix: <span class="string">'.min'</span>&#125;)) <span class="comment">// 重命名添加 .min 后缀 - main.min.js</span></div><div class="line">             .pipe(uglify()) <span class="comment">// js 代码压缩混淆</span></div><div class="line">             .pipe(gulp.dest(<span class="string">'./dist'</span>)) <span class="comment">// 把 main.min.js 发布到 dist 文件夹内</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line">gulp.tast(<span class="string">'clean'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> gulp.src([<span class="string">'./dist'</span>], &#123;read: <span class="literal">false</span>&#125;)</div><div class="line">             .pipe(clean())</div><div class="line">&#125;);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'default'</span>, [<span class="string">'clean'</span>], <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  gulp.start(<span class="string">'styles'</span>, <span class="string">'scripts'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="———-最后吐槽-———"><a href="#———-最后吐槽-———" class="headerlink" title="——— 最后吐槽 ———"></a>——— 最后吐槽 ———</h2><p>真的比 Grunt 简洁好多！！！你走…</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[HTML5 跨域通信 API - window.postMessage()]]></title>
      <url>https://monine.github.io/2016/08/06/postMessage/</url>
      <content type="html"><![CDATA[<blockquote>
<p>最近遇到一个可以说是非常头疼的问题，微信的 API 在 <code>iframe</code> 框架内无法调用，然后因为业务需求又必须解决这个问题。查阅相关资料发现在 <code>iframe</code> 框架内使用 <code>window.parent.wx.xxx()</code> 可以调用微信 API 方法，但是！！！如果当前页面与嵌入的 <code>iframe</code> 框架不在同一域名<strong>（跨域）</strong>情况下，这尼玛简直就是坑爹的需求！</p>
</blockquote>
<a id="more"></a>
<h2 id="———-遇到问题-———"><a href="#———-遇到问题-———" class="headerlink" title="——— 遇到问题 ———"></a>——— 遇到问题 ———</h2><p>好在哥还算是比较机智的少年，再加上有我军哥的引导，发现 HTML5 的新 API <code>window.postMessage()</code> 貌似是能够解决俺这个问题的。So.. 随即进行一系列研究测试。</p>
<h3 id="—-参考-—"><a href="#—-参考-—" class="headerlink" title="— 参考 —"></a><em>— 参考 —</em></h3><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage" target="_blank" rel="external">MDN - Window.postMessage()</a></p>
<h3 id="—-Syntax-—"><a href="#—-Syntax-—" class="headerlink" title="— Syntax —"></a><em>— Syntax —</em></h3><blockquote>
<p><code>otherWindow.postMessage(message, targetOrigin, [transfer])</code></p>
</blockquote>
<ul>
<li><code>message</code> 你要发送的信息（字符串和对象都可以）</li>
<li><code>targetOrigin</code> 你要发送信息的目标域名</li>
<li><code>transfer</code> 可选参数，具体啥意思还没做深入了解，也暂时都还没用到过。</li>
</ul>
<p>MDN 介绍的 <code>window.postMessage()</code> 是针对在一个页面使用 <code>window.open()</code> 动态打开新的页面而进行的跨域通信，非常详细，Demo 也很实用，但是对我而言貌似还欠缺什么东西。</p>
<h3 id="—-Tips-—"><a href="#—-Tips-—" class="headerlink" title="— Tips —"></a><em>— Tips —</em></h3><p>在 <code>var targetPage = window.open(&#39;http://target.com&#39;)</code> 打开新页面之后需要等到 <code>http://target.com</code> 页面加载完成之后才能进行 <code>postMessage</code> 跨域通信，但是在跨域的情况下我们是无法对 <code>targetPage</code> 进行 <code>onload</code> 事件监听的，所以这里只能做 延迟 <code>setTimeout</code> 或者 定时 <code>setInterval</code> 处理。<br>同样的，在页面内嵌入 <code>iframe</code> 页面的情况下，我们也需要等到页面内的 <code>iframe</code> 加载完成之后进行 <code>postMessage</code> 跨域通信。</p>
<p>缕缕思路，写了一些小 Demo，使用 <code>window.open()</code> 动态打开新的页面使用 <code>postMessage</code> 跨域通信是 OK 的（<a href="#———-干货代码-———">干货代码</a>），但是在页面内嵌入 <code>iframe</code> 还是实现不了，Chrome Console 内经常这样报错：</p>
<blockquote>
<p>Failed to execute ‘postMessage’ on ‘DOMWindow’: The target origin provided (‘<a href="http://192.168.198.157:8000" target="_blank" rel="external">http://192.168.198.157:8000</a>‘) does not match the recipient window’s origin (‘<a href="http://192.168.198.157:3000" target="_blank" rel="external">http://192.168.198.157:3000</a>‘).</p>
</blockquote>
<h3 id="—-PS-—"><a href="#—-PS-—" class="headerlink" title="— PS —"></a><em>— PS —</em></h3><p>PageA &gt;&gt; <a href="http://192.168.198.157:8000" target="_blank" rel="external">http://192.168.198.157:8000</a><br>PageB &gt;&gt; <a href="http://192.168.198.157:3000" target="_blank" rel="external">http://192.168.198.157:3000</a><br><strong>PageA  页面内嵌入 <code>iframe</code> PageB</strong></p>
<h2 id="———-思考思考-———"><a href="#———-思考思考-———" class="headerlink" title="——— 思考思考 ———"></a>——— 思考思考 ———</h2><p>半个小时都没有解决，这个时候觉得应该放一放，再仔细思考思考是哪里出问题了，一定是有没弄明白的地方，然后也 Google 了许多资料详细查看，讲讲思路吧。</p>
<ul>
<li>解决问题要从问题源头出发，我现在遇到的问题归根究底就是两个不同域名的页面如何进行通信？</li>
<li>浏览器的同源政策不允许跨域，然而 HTML5 API <code>window.postMessage()</code> 就是用来实现跨域通信的。</li>
<li>那么通信的原理是怎样的了？</li>
<li>如果有两个页面 PageA 和 PageB，PageA  页面内嵌入 <code>iframe</code> PageB，那么理论上是应该可以实现双向通信的。</li>
</ul>
<p>其实非常简单，就是 PageA 通过 <code>window.postMessage()</code> 发送一个信息给 PageB，PageB 在 <code>window</code> 上添加一个事件监听绑定 <code>message</code> 事件可以接收到来自任何不同域名通过 <code>postMessage</code> 方法发送过来的信息，当 PageB 接收到 PageA 发送过来的信息时执行监听事件就 OK，在监听事件的 <code>event</code> 参数中包含了所有 <code>message</code> 事件接收到的相关数据。包括发送信息的内容 <code>event.data</code>，发送信息的域名 <code>event.origin</code> 等等。</p>
<p>同样的，在 PageA 内添加一个事件监听绑定 <code>message</code> 事件，在 PageB 内通过 <code>postMessage</code> 方法发送信息给 PageA 一样可以进行跨域通信。</p>
<h3 id="—-Tips-—-1"><a href="#—-Tips-—-1" class="headerlink" title="— Tips —"></a><em>— Tips —</em></h3><p><strong>我们可以通过 <code>event.origin</code> 来过滤掉来自其他未知站点发送过来的 <code>message</code> 事件信息，防止跨站攻击！</strong></p>
<p>大概就是以上的思考，然后继续写 Demo…</p>
<h2 id="———-干货代码-———"><a href="#———-干货代码-———" class="headerlink" title="——— 干货代码 ———"></a>——— 干货代码 ———</h2><h3 id="—-PageA-—"><a href="#—-PageA-—" class="headerlink" title="— PageA —"></a><em>— PageA —</em></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Page A<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>This is Page A<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"openNewWindowBtn"</span> <span class="attr">type</span>=<span class="string">"button"</span>&gt;</span>Open New Window<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"postMessageBtn"</span> <span class="attr">type</span>=<span class="string">"button"</span>&gt;</span>Post Message<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"message"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">id</span>=<span class="string">"receiverIframe"</span> <span class="attr">src</span>=<span class="string">"http://192.168.198.157:3000/pageB.html"</span> <span class="attr">frameborder</span>=<span class="string">"1"</span> <span class="attr">width</span>=<span class="string">"800"</span> <span class="attr">height</span>=<span class="string">"500"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">var</span> receiver = <span class="built_in">document</span>.getElementById(<span class="string">'receiverIframe'</span>).contentWindow;</div><div class="line">      <span class="keyword">var</span> postBtn = <span class="built_in">document</span>.getElementById(<span class="string">'postMessageBtn'</span>);</div><div class="line">      <span class="keyword">var</span> openBtn = <span class="built_in">document</span>.getElementById(<span class="string">'openNewWindowBtn'</span>);</div><div class="line">      <span class="keyword">var</span> messageEle = <span class="built_in">document</span>.getElementById(<span class="string">'message'</span>);</div><div class="line"></div><div class="line">      <span class="function"><span class="keyword">function</span> <span class="title">sendMessage</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        receiver.postMessage(<span class="string">'Hello Page B.. This is page A.. You are my iframe'</span>, <span class="string">'http://192.168.198.157:3000'</span>);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="function"><span class="keyword">function</span> <span class="title">openNewWindow</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> pageB = <span class="built_in">window</span>.open(<span class="string">'http://192.168.198.157:3000/pageB.html'</span>);</div><div class="line"></div><div class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">          pageB.postMessage(<span class="string">'Hello Page B.. This is Page A.. (form PageA window.open())'</span>, <span class="string">'http://192.168.198.157:3000'</span>);</div><div class="line">        &#125;, <span class="number">500</span>)</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="function"><span class="keyword">function</span> <span class="title">receiveMessage</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(event);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (event.origin !== <span class="string">'http://192.168.198.157:3000'</span>) <span class="keyword">return</span>;</div><div class="line"></div><div class="line">        messageEle.innerHTML = <span class="string">"Message Received: "</span> + event.data;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      postBtn.addEventListener(<span class="string">'click'</span>, sendMessage, <span class="literal">false</span>);</div><div class="line"></div><div class="line">      openBtn.addEventListener(<span class="string">'click'</span>, openNewWindow, <span class="literal">false</span>);</div><div class="line"></div><div class="line">      <span class="built_in">window</span>.addEventListener(<span class="string">'message'</span>, receiveMessage, <span class="literal">false</span>);</div><div class="line">    &#125;</div><div class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="—-PageB-—"><a href="#—-PageB-—" class="headerlink" title="— PageB —"></a><em>— PageB —</em></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Page B<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>This is Page B<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"postMessageBtn"</span> <span class="attr">type</span>=<span class="string">"button"</span>&gt;</span>Post Message<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"message"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">var</span> postBtn = <span class="built_in">document</span>.getElementById(<span class="string">'postMessageBtn'</span>)</div><div class="line">      <span class="keyword">var</span> messageEle = <span class="built_in">document</span>.getElementById(<span class="string">'message'</span>);</div><div class="line"></div><div class="line">      <span class="function"><span class="keyword">function</span> <span class="title">receiveMessage</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(event);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (event.origin !== <span class="string">'http://192.168.198.157:8000'</span>) <span class="keyword">return</span>;</div><div class="line"></div><div class="line">        messageEle.innerHTML = <span class="string">"Message Received: "</span> + event.data;</div><div class="line"></div><div class="line">        <span class="comment">// 接收 PageA 的任何消息都自动回复并加上时间戳</span></div><div class="line">        event.source.postMessage(<span class="string">'Hello Page A.. This is page B.. (from PageB autoreply) timestamp = '</span> + <span class="keyword">new</span> <span class="built_in">Date</span>().getTime(), event.origin);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="function"><span class="keyword">function</span> <span class="title">sendMessage</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="comment">// 这里需要特别注意！！！</span></div><div class="line">        <span class="comment">// 直接打开 PageB (当前页面) 是无法向 PageA 发送跨域信息的！！！</span></div><div class="line">        <span class="comment">// 只有当 PageB (当前页面) 处于 PageA 页面内的 iframe 中的时候才能发送跨域信息 </span></div><div class="line">        <span class="comment">// 而且此处不能使用 window.postMessage()</span></div><div class="line">        <span class="comment">// 因为 PageB (当前页面) 是 PageA 页面内嵌入的 iframe</span></div><div class="line">        <span class="comment">// 此时 PageB 的 window 指向的是 PageA 内 iframe 框架内的 window</span></div><div class="line">        <span class="comment">// 而当前情况需要指向父级 window (即 top 或者 parent) 才能进行 postMessage</span></div><div class="line">        top.postMessage(<span class="string">'Hello Page A.. This is page B..'</span>, <span class="string">'http://192.168.198.157:8000'</span>);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      postBtn.addEventListener(<span class="string">'click'</span>, sendMessage, <span class="literal">false</span>);</div><div class="line"></div><div class="line">      <span class="built_in">window</span>.addEventListener(<span class="string">'message'</span>, receiveMessage, <span class="literal">false</span>);</div><div class="line">    &#125;</div><div class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="———-踩过的坑-———"><a href="#———-踩过的坑-———" class="headerlink" title="——— 踩过的坑 ———"></a>——— 踩过的坑 ———</h2><h3 id="—-PageB-需要特别注意的地方！！！-—"><a href="#—-PageB-需要特别注意的地方！！！-—" class="headerlink" title="— PageB 需要特别注意的地方！！！ —"></a><em>— PageB 需要特别注意的地方！！！ —</em></h3><ul>
<li><p>直接在浏览器中打开 PageB 页面是无法向 PageA 页面发送跨域信息的！！！</p>
</li>
<li><p>PageB 页面的 <code>receiveMessage</code> 方法自动回复了所有来自 PageA 页面的 <code>postMessage</code> 信息并且加上了时间戳。</p>
</li>
<li><p>为什么 PageB 页面内的 <code>sendMessage</code> 方法使用的是 <code>top.postMessage()</code> 发送跨域信息？？？</p>
<ul>
<li>答案就在下面的结论中</li>
</ul>
</li>
</ul>
<h3 id="—-Tips-—-2"><a href="#—-Tips-—-2" class="headerlink" title="— Tips —"></a><em>— Tips —</em></h3><p>如果不是使用 <code>window.open()</code> 打开的页面或者 <code>iframe</code> 嵌入的页面，就跟当前页面扯不上任何关系，是无法使用 <code>window.postMessage()</code> 进行跨域通信的！！！</p>
<p>描述的貌似不是很清楚，举个栗子：</p>
<ul>
<li><p>如果你打开浏览器，输入一个页面地址 PageA，然后打开一个新的标签页，又输入一个页面地址 PageB，那么这两个页面是无论如何都不能使用 <code>window.postMessage()</code> 来进行跨域通信的，他们并没有任何血缘关系…</p>
</li>
<li><p>同样，打开浏览器，输入一个页面地址 PageA，然后通过 PageA 动态打开 PageB (当然，不是通过 PageA 内的 <code>a</code> 标签链接打开)，或者 PageA 内嵌入了 <code>iframe</code> PageB，那么这个时候就厉害了，它两有血缘关系啦！PageB 这个时候是不是就相当于是 PageA 是崽崽？是因为有了 PageA，所以才有了 PageB 的出现。然后理所当然的，PageA 拥有了控制 PageB 的某些权限，其中就包括 <code>window.postMessage()</code>。</p>
</li>
</ul>
<h2 id="———-得出结论-———"><a href="#———-得出结论-———" class="headerlink" title="——— 得出结论 ———"></a>——— 得出结论 ———</h2><blockquote>
<p><code>window.postMessage()</code> 中的 <code>window</code> 到底是什么呢？</p>
</blockquote>
<p><strong>A：始终是你要通信的目标页面的 <code>window</code></strong></p>
<h3 id="—-PageA-页面内嵌入-iframe-PageB-页面-—"><a href="#—-PageA-页面内嵌入-iframe-PageB-页面-—" class="headerlink" title="— PageA 页面内嵌入 iframe PageB 页面 —"></a><em>— PageA 页面内嵌入 <code>iframe</code> PageB 页面 —</em></h3><ul>
<li><p>PageA 页面向 PageB 页面发送跨域信息，<code>window</code> 为 PageB 页面的 <code>window</code>，即 <code>iframe.contentWindow</code>。</p>
</li>
<li><p>PageB 页面向 PageA 页面发送跨域信息，<code>window</code> 为 PageA 页面的 <code>window</code>，即 <code>top</code> 或者 <code>parent</code>。</p>
</li>
</ul>
<h3 id="—-PageA-页面内代码使用-window-open-打开-PageB-页面-—"><a href="#—-PageA-页面内代码使用-window-open-打开-PageB-页面-—" class="headerlink" title="— PageA 页面内代码使用 window.open() 打开 PageB 页面 —"></a><em>— PageA 页面内代码使用 <code>window.open()</code> 打开 PageB 页面 —</em></h3><ul>
<li><p>PageA 页面向 PageB 页面发送跨域信息，<code>window</code> 为 <code>var pageB = window.open(&#39;http://192.168.197.157:3000/pageB.html&#39;)</code> 中的变量 pageB。</p>
</li>
<li><p>PageB 页面向 PageA 页面发送跨域信息，<code>window</code> 为</p>
</li>
<li><p>PageA 页面内在 <code>window.open()</code> 打开新页面的情况下是 <code>window.open()</code> 所赋值的那个变量 <code>var pageB = window.open(&#39;http://192.168.197.157:3000/pageB.html&#39;)</code> 中的 <code>pageB</code>。</p>
</li>
</ul>
<h2 id="———-最后最后-———"><a href="#———-最后最后-———" class="headerlink" title="——— 最后最后 ———"></a>——— 最后最后 ———</h2><p><strong>请无论如何在监听 <code>message</code> 事件的函数内对 <code>event.origin</code> 进行过滤，不然来自未知站点的 <code>window.postMessage()</code> 可以对你的站点为所欲为。</strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Develop Tools]]></title>
      <url>https://monine.github.io/2016/07/16/Develop-Tools/</url>
      <content type="html"><![CDATA[<ul>
<li><h3 id="Chrome"><a href="#Chrome" class="headerlink" title="Chrome"></a><a href="https://www.google.com/chrome/browser/desktop/index.html" target="_blank" rel="external">Chrome</a></h3><blockquote>
<p>a fast, free web browser</p>
</blockquote>
<p>V8 引擎，你值得拥有~</p>
</li>
</ul>
<a id="more"></a>
<ul>
<li><h3 id="Chrome-Canary"><a href="#Chrome-Canary" class="headerlink" title="Chrome Canary"></a><a href="https://www.google.com/chrome/browser/canary.html" target="_blank" rel="external">Chrome Canary</a></h3><blockquote>
<p>on the bleeding edge of the web </p>
</blockquote>
<p>Chrome 金丝雀，其实就冲着它土豪金的外表觉着特有 B 格。</p>
</li>
<li><h3 id="Sublime-Text"><a href="#Sublime-Text" class="headerlink" title="Sublime Text"></a><a href="https://www.sublimetext.com/" target="_blank" rel="external">Sublime Text</a></h3><blockquote>
<p>a sophisticated text editor for code, markup and prose</p>
</blockquote>
<p>唯一会用的 Code Editor</p>
</li>
<li><h3 id="Package-Control"><a href="#Package-Control" class="headerlink" title="Package Control"></a><a href="https://packagecontrol.io/" target="_blank" rel="external">Package Control</a></h3><blockquote>
<p>the Sublime Text package manager</p>
</blockquote>
<p>没有它，Sublime Text 只是半成品。</p>
<ul>
<li>Emmet</li>
<li>HTML5</li>
<li>jQuery</li>
<li>Alignment</li>
<li>BracketHighlighter</li>
<li>SublimeLinter</li>
<li>SublimeCodeIntel</li>
<li>Seti_UI<ul>
<li>“theme”: “Seti.sublime-theme”</li>
<li>“highlight_line”: true</li>
</ul>
</li>
<li>Base 16 Color Schemes<ul>
<li>“color_scheme”: “Packages/User/SublimeLinter/base16-eighties (SL).tmTheme”</li>
</ul>
</li>
</ul>
</li>
<li><h3 id="Git-for-windows"><a href="#Git-for-windows" class="headerlink" title="Git for windows"></a><a href="https://git-for-windows.github.io/" target="_blank" rel="external">Git for windows</a></h3><blockquote>
<p>Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency.</p>
</blockquote>
<p><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="external">Git 教程 - 廖雪峰</a></p>
</li>
<li><h3 id="Node-js、Node-js-中文"><a href="#Node-js、Node-js-中文" class="headerlink" title="Node.js、Node.js 中文"></a><a href="https://nodejs.org/en/" target="_blank" rel="external">Node.js</a>、<a href="http://nodejs.cn/" target="_blank" rel="external">Node.js 中文</a></h3><blockquote>
<p>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。Node.js 的包管理器 npm，是全球最大的开源库生态系统。</p>
</blockquote>
</li>
<li><h3 id="Puer"><a href="#Puer" class="headerlink" title="Puer"></a><a href="http://leeluolee.github.io/2014/10/24/use-puer-helpus-developer-frontend/" target="_blank" rel="external">Puer</a></h3><blockquote>
<p>一个可以实时编辑刷新的前端服务器</p>
</blockquote>
<p>Code Editor 中 <code>Ctrl + s</code> 保存文件，页面立即同步刷新。</p>
</li>
<li><h3 id="Fiddler"><a href="#Fiddler" class="headerlink" title="Fiddler"></a><a href="http://www.telerik.com/fiddler" target="_blank" rel="external">Fiddler</a></h3><blockquote>
<p>The free web debugging proxy for any browser, system or platform</p>
</blockquote>
<p>与后端接口打交道，经常要用来截包查看数据。(主要针对移动端)<br>还可以用来模拟/修改请求，我用来干过坏事 h-h<br><a href="http://note.youdao.com/yws/public/redirect/share?id=61022f8971604bd58f0ddcf3df070ced&amp;type=false" target="_blank" rel="external">Fiddler 使用简介</a></p>
</li>
<li><h3 id="Rosin"><a href="#Rosin" class="headerlink" title="Rosin"></a><a href="http://alloyteam.github.io/Rosin/" target="_blank" rel="external">Rosin</a></h3><blockquote>
<p>A tool for web developers debug mobile page with fiddler</p>
</blockquote>
<p>Fiddler 的好基友，主要用来查看控制台输出信息。(移动端)</p>
</li>
<li><h3 id="微信-web-开发者工具"><a href="#微信-web-开发者工具" class="headerlink" title="微信 web 开发者工具"></a><a href="https://mp.weixin.qq.com/wiki/10/e5f772f4521da17fa0d7304f68b97d7e.html" target="_blank" rel="external">微信 web 开发者工具</a></h3><blockquote>
<p>为帮助开发者更方便、更安全地开发和调试基于微信的网页，我们推出了 web 开发者工具。它是一个桌面应用，通过模拟微信客户端的表现，使得开发者可以使用这个工具方便地在 PC 或者 Mac 上进行开发和调试工作。</p>
</blockquote>
<p>主要用来开发需要微信授权的页面，可以拿到微信用户信息进行调试。</p>
</li>
<li><h3 id="SVGO"><a href="#SVGO" class="headerlink" title="SVGO"></a><a href="http://note.youdao.com/yws/public/redirect/share?id=61022f8971604bd58f0ddcf3df070ced&amp;type=false" target="_blank" rel="external">SVGO</a></h3><blockquote>
<p>SVG Optimizer is a Nodejs-based tool for optimizing SVG vector graphics files. </p>
</blockquote>
<p>SVG 精简压缩，删除无用信息。</p>
</li>
<li><h3 id="Beyond-Compare"><a href="#Beyond-Compare" class="headerlink" title="Beyond Compare"></a><a href="http://www.scootersoftware.com/index.php" target="_blank" rel="external">Beyond Compare</a></h3><blockquote>
<p>Beyond Compare is focused.  Beyond Compare allows you to quickly and easily compare your files and folders.  By using simple, powerful commands you can focus on the differences you’re interested in and ignore those you’re not.  You can then merge the changes, synchronize your files, and generate reports for your records.</p>
</blockquote>
<p>代码对比工具，我只会九牛一毛 e-e</p>
</li>
</ul>
]]></content>
    </entry>
    
  
  
</search>
